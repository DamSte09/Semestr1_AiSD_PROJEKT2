CombSort

wejście(tab[], rozmiar)
gap <- rozmiar
zamiana <- true
dopóki gap != 1 || zamiana == true
	gap<-gap * 10 div 13
	jeśli gap < 1 wykonaj
		gap <- 1
	zamiana <- false
	i <- 0
 	dopóki i + gap < rozmiar wykonuj
		jeśli tab[i + gap] < tab[i] wykonaj
			zamień ( tab[i], tab[i + gap])
			zamiana <- true
		i <- i+1
Zakończ



Heap Sort

Wejście(tab[], rozmiar)
i <- rozmiar/2-1
dopóki i >= 0 wykonuj
	Kopcowanie(tab, rozmiar, i)
	i <- i-1
i <- rozmiar-1
dopóki i > 0 wykonuj
	zamień(tab[0], tab[i])
	Kopcowanie(tab, i, 0)
	i <- i-1
Zakończ



Kopcowanie

Wejście(tab[], rozmiar, i)
najwiekszy <- i
lewy <- 2 * i + 1
prawy <- 2 * i + 2
jeśli lewy<rozmiar && tab[lewy]>tab[najwiekszy] wykonaj
	najwiekszy <- prawy
jeśli prawy<rozmiar && tab[prawy]>tab[najwiekszy] wykonaj
	najwiekszy <- prawy
jesli najwiekszy != i wykonaj
	zamień (tab[i], tab[najwiekszy])
	Kopcowanie(tab, rozm, naj)
Zakończ
